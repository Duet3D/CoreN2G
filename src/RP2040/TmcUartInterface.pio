; These are the RP2040 PIO programs used to handle TMC driver sigle-wire UART transmission and reception

.program TMC_Interface
.side_set 1 opt

; Transmit program. This reads a count from the transmit fifo, then reads that number of bytes plus one from the transmit fifo and transmits them.
; Then it sets the pin to be an input and receives bytes on the same wire and sends them through the recive fifo.
; In case there is a pulldown resistor on the pin, it waits for the pin to be high before receiving.
; SHIFTCTRL_PULL_THRESH and SHIFTCTRL_PUSH_THRESH must be set to 8

    set     pins, 1             ; set Tx/Rx pin high
    set     pindirs, 1          ; set Tx/Rx pin to output
    pull    block               ; wait for byte count minus 1
    mov     y, osr [7]          ; copy byte count to Y
txbyteloop:
    pull    block               ; get next byte to send
    set     x, 7 side 0 [7]     ; init the bit counter and send the start bit
txbitloop:
    out     pins, 1             ; send the next bit
    jmp     x--, txbitloop [6]  ; loop sending bits
    set     pins, 1 [6]         ; send the stop bit
    jmp     y--, txbyteloop     ; repeat for all bytes
    set     pindirs, 0 [7]      ; set Tx/Rx pin to input
    nop     [7]                 ; wait for the pin to be pulled low by the pulldown
    .wrap_target
    wait    1 pin, 0            ; wait for TMC to pull the pin high
    wait    0 pin, 0            ; wait for start bit
    set     x, 7 [7]            ; init bit counter
    nop     [2]
rxbitloop:
    in      pins, 1             ; read the next bit
    jmp     x--, rxbitloop [6]  ; loop reading bits
    push    noblock             ; send the byte
    .wrap

; Program to drive WS2812 LEDs, based on the example in the RP2040 datrasheet
; This reads 32-bit words from the FIFO and sends the upper 24 bits to the WS2812 LED string.

.program ws2812
.side_set 1

.define public T1 2
.define public T2 5
.define public T3 3

.wrap_target
bitloop:
    out     x, 1 side 0 [T3 - 1]        ; Side-set still takes place when instruction stalls
    jmp     !x do_zero side 1 [T1 - 1]  ; Branch on the bit we shifted out. Positive pulse
do_one:
    jmp     bitloop side 1 [T2 - 1]     ; Continue driving high, for a long pulse
do_zero:
    nop side 0 [T2 - 1]                 ; Or drive low, for a short pulse
    .wrap

; Total length of both programs 19 + 4 = 23 instructions

; End
