; These are the RP2040 PIO programs used to handle TMC driver sigle-wire UART transmission and reception

.program TMC_Tx
.side_set 1 opt

; Transmit program. This reads 8-bit words from the FIFO and transmits them. After each word it sets the pin to be an input in case the driver needs to transmit.
; There must be a pullup resistor on the pin, or we could use the internal pullup resistor as long as there is no external pulldown resistor.
; SHIFTCTRL_PULL_THRESH must be set to 8

    set     pins, 1             ; set Tx/Rx pin high
    .wrap_target
    set     pindirs, 0          ; set Tx/Rx pin to input
    pull    block               ; wait for word count minus 1
    set     pindirs, 1 [7]      ; set Tx/Rx pin to output
    set     x, 7 side 0 [7]     ; init the bit counter and send the start bit
bitloop:
    out     pins, 1             ; send the next bit
    jmp     x--, bitloop [6]    ; loop sending bits
    set     pins, 1 [6]         ; send the stop bit
    .wrap                       ; set Tx/Rx pin to input and wait for next command

; Receive program. This reads received bytes and pushes complete 8-bit words through the FIFO.
; SHIFTCTRL_PUSH_THRESH must be set to 8

.program TMC_Rx
    .wrap_target
start:
    wait    0 pin, 0            ; wait for start bit
    set     x, 7 [10]           ; init bit counter
bitloop:
    in      pins, 1             ; read the next bit
    jmp     x--, bitloop [6]    ; loop reading bits
    jmp     pin, stopBitOk      ; jump if stop bit seen
    irq     4 rel               ; signal error
    wait	1 pin 0
    jmp		start
stopBitOk:
    push    noblock
    .wrap

; Program to drive WS2812 LEDs, based on the example in the RP2040 datrasheet
; This reads 32-bit words from the FIFO and sends the upper 24 bits to the WS2812 LED string.

.program ws2812
.side_set 1

.define public T1 2
.define public T2 5
.define public T3 3

.wrap_target
bitloop:
    out     x, 1 side 0 [T3 - 1]        ; Side-set still takes place when instruction stalls
    jmp     !x do_zero side 1 [T1 - 1]  ; Branch on the bit we shifted out. Positive pulse
do_one:
    jmp     bitloop side 1 [T2 - 1]     ; Continue driving high, for a long pulse
do_zero:
    nop side 0 [T2 - 1]                 ; Or drive low, for a short pulse
    .wrap

; Total length of all three programs 12 + 11 + 4 = 27 instructions

; End
